package baekjoon;
import java.io.*;
import java.util.Arrays;

public class Main_B16159_전광판의숫자 {
    public static void main(String[] args) throws IOException {
        char number[][][] = {{{'0','0','0','0','0','0'},{'0','0','1','1','0','0'},{'0','1','0','0','1','0'},{'0','1','0','0','1','0'},{'0','1','0','0','1','0'},{'0','0','1','1','0','0'},{'0','0','0','0','0','0'}},
                            {{'0','0','0','0','0','0'},{'0','0','0','1','0','0'},{'0','0','1','1','0','0'},{'0','0','0','1','0','0'},{'0','0','0','1','0','0'},{'0','0','0','1','0','0'},{'0','0','0','0','0','0'}},
                            {{'0','0','0','0','0','0'},{'0','1','1','1','1','0'},{'0','0','0','0','1','0'},{'0','1','1','1','1','0'},{'0','1','0','0','0','0'},{'0','1','1','1','1','0'},{'0','0','0','0','0','0'}},
                            {{'0','0','0','0','0','0'},{'0','1','1','1','0','0'},{'0','0','0','0','1','0'},{'0','0','0','1','0','0'},{'0','0','0','0','1','0'},{'0','1','1','1','0','0'},{'0','0','0','0','0','0'}},
                            {{'0','0','0','0','0','0'},{'0','0','0','1','0','0'},{'0','0','1','1','0','0'},{'0','1','0','1','0','0'},{'1','1','1','1','1','0'},{'0','0','0','1','0','0'},{'0','0','0','0','0','0'}},
                            {{'0','0','0','0','0','0'},{'0','1','1','1','1','0'},{'0','1','0','0','0','0'},{'0','1','1','1','0','0'},{'0','0','0','0','1','0'},{'0','1','0','0','1','0'},{'0','0','1','1','0','0'}},
                            {{'0','0','0','0','0','0'},{'0','1','0','0','0','0'},{'0','1','0','0','0','0'},{'0','1','1','1','1','0'},{'0','1','0','0','1','0'},{'0','1','1','1','1','0'},{'0','0','0','0','0','0'}},
                            {{'0','0','0','0','0','0'},{'0','1','1','1','1','0'},{'0','0','0','0','1','0'},{'0','0','0','1','0','0'},{'0','0','0','1','0','0'},{'0','0','0','1','0','0'},{'0','0','0','0','0','0'}},
                            {{'0','0','0','0','0','0'},{'0','1','1','1','1','0'},{'0','1','0','0','1','0'},{'0','1','1','1','1','0'},{'0','1','0','0','1','0'},{'0','1','1','1','1','0'},{'0','0','0','0','0','0'}},
                            {{'0','1','1','1','1','0'},{'0','1','0','0','1','0'},{'0','1','0','0','1','0'},{'0','1','1','1','1','0'},{'0','0','0','0','1','0'},{'0','0','0','0','1','0'},{'0','0','0','0','1','0'}}};
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] input = new String[7];
        for (int i = 0; i < 7; i++) {
            input[i] = br.readLine();
        }
        int size = input[0].length();
        int N = size/6;
        int perm[] = new int[N];
        for (int i = 0; i < N; i++) { // 0~5 , 6~11, 쭉쭉 확인의 기준
            for (int j = 0; j < number.length; j++) {   // 10개의 number중 있는지
                boolean ok = true;
                for (int k = 0; k < 7; k++) {   // 비교를 7행을 한다.
                    for (int l = i*6; l < (i+1)*6; l++) {
                        if(number[j][k][l%6] != input[k].charAt(l)) {
                            ok = false;
                        }
                    }
                }
                if(ok) perm[i] = j;
            }
        }
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));
        int [] copy = nextPerm(perm);
        if(Arrays.equals(copy,perm)) bw.append("The End");
        else {
            for (int i = 0; i < 7; i++) {
                for (int j = 0; j < copy.length; j++) {
                    int idx = copy[j];
                    String line = String.valueOf(number[idx][i]);
                    bw.append(line);
                }
                bw.append("\n");
            }
        }
        bw.flush();
        bw.close();
    }

    private static int[] nextPerm(int[] perm) {
        int[] copy = new int[perm.length];
        for (int i = 0; i < perm.length; i++) {
            copy[i] = perm[i];
        }
        int size = copy.length;
        int i = size - 1;
        int j = size - 1;

        /** 1. 꼭대기 찾기 **/
        while(i > 0 && copy[i-1] >= copy[i]) --i;
        if(i <= 0) return copy;	// 꼭대기가 0번째 인덱스라면 마지막순열

        /** 2. j값 찾기 **/
        while(copy[i-1] > copy[j]) --j;
        int tmp = copy[i-1];
        copy[i-1] = copy[j];
        copy[j] = tmp;

        /** 3. 순서 정해주기 **/
        j = size - 1;
        for(; i < j; ++i, --j) {
            tmp = copy[i];
            copy[i] = copy[j];
            copy[j] = tmp;
        }
        return copy;
    }
}
